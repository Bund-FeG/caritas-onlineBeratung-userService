openapi: 3.0.1
info:
  title: will be replaced
  description: This information will be replaced by the SpringFox config information
  version: 0.0.1
servers:
  - url: /
paths:
  /useradmin:
    get:
      tags:
        - root-controller
      summary: 'Returns the hal root entry point. [Authorization: Role: user-admin]'
      operationId: getRoot
      responses:
        200:
          description: OK - successfull operation
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/RootDTO'
      security:
        - Bearer: [ ]
  /useradmin/session:
    get:
      tags:
        - admin-user-controller
      summary: 'Returns the list of agencies by search query parameter. [Authorization: Role:
      user-admin]'
      operationId: getSessions
      parameters:
        - name: filter
          in: query
          description: 'The filter parameters to search for. If no filter is set all sessions are
          being returned. If more than one filter is set the first given filter is used only.'
          schema:
            type: object
            properties:
              agency:
                type: integer
              asker:
                type: string
              consultant:
                type: string
              consultingType:
                type: integer
        - name: page
          in: query
          description: Number of page where to start in the query (1 = first page)
          required: true
          schema:
            type: integer
        - name: perPage
          in: query
          description: Number of items which are being returned per page
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK - successfull operation
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/SessionAdminResultDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/consultant:
    post:
      tags:
        - admin-user-controller
      summary: 'Creates a new consultant [Authorization: Role: consultant-admin]'
      operationId: createConsultant
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateConsultantDTO'
        required: true
      responses:
        201:
          description: CREATED - consultant was created successfully
          content:
            'application/hal+json':
              schema:
                $ref: '#/components/schemas/CreateConsultantResponseDTO'
        400:
          description: BAD REQUEST - invalid/incomplete request or body object
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]
  /useradmin/consultant/{consultantId}:
    delete:
      tags:
        - admin-user-controller
      summary: 'Mark a consultant for deletion [Authorization: Role: consultant-admin]'
      operationId: markConsultantForDeletion
      parameters:
        - name: consultantId
          in: path
          description: consultant id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK - consultant was marked for deletion successfully
        400:
          description: BAD REQUEST - invalid/incomplete request
        401:
          description: UNAUTHORIZED - no/invalid role/authorization
        500:
          description: INTERNAL SERVER ERROR - server encountered unexpected condition
      security:
        - Bearer: [ ]

components:
  schemas:
    RootDTO:
      type: object
      required:
        - _links
      properties:
        _links:
          $ref: '#/components/schemas/RootLinks'

    RootLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        sessions:
          $ref: '#/components/schemas/HalLink'

    HalLink:
      type: object
      required:
        - href
      properties:
        href:
          type: string
        method:
          type: string
          enum: [ GET, POST, DELETE, PUT ]
        templated:
          type: boolean

    SessionAdminResultDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/SessionAdminDTO'
        _links:
          $ref: '#/components/schemas/SessionAdminResultLinks'

    SessionAdminDTO:
      type: object
      properties:
        userId:
          type: string
          example: "1da238c6-cd46-4162-80f1-bff74eafe77f"
        consultantId:
          type: string
          example: "1da238c6-cd46-4162-80f1-bff74eafe77f"
        username:
          type: string
          example: "enc.OBSXEZTPOJWWC3TDMUWWC43LMVZC2NZS"
        email:
          type: string
          example: "email@beratungcaritas.de"
        consultingType:
          type: integer
          example: 1
        postcode:
          type: string
          example: "12345"
        agencyId:
          type: integer
          example: 1
        isTeamSession:
          type: boolean
        messageDate:
          type: string
        createDate:
          type: string
        updateDate:
          type: string

    SessionAdminResultLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        next:
          $ref: '#/components/schemas/HalLink'
        previous:
          $ref: '#/components/schemas/HalLink'

    CreateConsultantDTO:
      type: object
      required:
        - username
        - firstname
        - lastname
        - email
        - formalLanguage
        - absent
      properties:
        username:
          type: string
          example: "max.mustermann"
        firstname:
          type: string
          example: "Max"
        lastname:
          type: string
          example: "Mustermann"
        email:
          type: string
          example: "max@mustermann.de"
        formalLanguage:
          type: boolean
          example: true
        absent:
          type: boolean
          example: true
        absenceMessage:
          type: string
          example: "I am absent until..."

    ConsultantDTO:
      type: object
      properties:
        id:
          type: string
          example: "0f2cca9c-9303-4791-a0a5-a1ce16f1524f"
        username:
          type: string
          example: "max.mustermann"
        firstname:
          type: string
          example: "Max"
        lastname:
          type: string
          example: "Mustermann"
        email:
          type: string
          example: "max@mustermann.de"
        formalLanguage:
          type: boolean
          example: true
        teamConsultant:
          type: boolean
          example: false
        absent:
          type: boolean
          example: true
        absenceMessage:
          type: string
          example: "I am absent until..."
        createDate:
          type: string
        updateDate:
          type: string

    CreateConsultantResponseDTO:
      type: object
      properties:
        _embedded:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantDTO'
        _links:
          $ref: '#/components/schemas/CreateLinks'

    CreateLinks:
      type: object
      required:
        - self
      properties:
        self:
          $ref: '#/components/schemas/HalLink'
        update:
          $ref: '#/components/schemas/HalLink'
        delete:
          $ref: '#/components/schemas/HalLink'

  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
